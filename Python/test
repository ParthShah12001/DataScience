 initialize: function () {
        //TODO(MTM) model related business rules should be with model/domain Object and not the view
        //TODO(MTM)Divide model and view business rules in a function
        //TODO(MTM) Return related child pic data from server
        if (this.options.isIssuerView) {
            this.listenToOnce(this.options.parentModel.picUser,
                "change",
                function () {
                    this.listenTo(this.options.parentModel.picUser, "change", this.setPicModel);
                });
        } else {
            if (this.options.dualDates) {
                this.listenToOnce(this.options.dualDates, "sync", this.render);
                this.options.dualDateModel = this.options.dualDates.first();
            }
        }
    },

 if (!isRequestPending) {

                    context.setParentPicModel(model);
                    Status.AlertMessage.reset();
                    context.toggleError();
                    Validation.errors.remove('PIC-AccessRequestPending');
                }

setParentPicModel: function (model) {
        var picLocation = "";
        var picStateName = "";
        if (model) {
            if (model.get("stateId"))
                picStateName = _.findWhere(Resources.SelectLists.states, { value: model.get("stateId") }).name;
            if (model.get("locationId"))
                picLocation = _.findWhere(EY.Fact.Resources.Locations, { id: model.get("locationId") });
        }
        this.options.parentModel.set({
            'picUserId': model ? model.get("id") : null,
            'picFullName': model ? model.get("legalName") : null,
            'picFirstName': model ? model.get("firstName") : null,
            'picMiddleName': model ? model.get("middleName") : null,
            'picLastName': model ? model.get("lastName") : null,
        });
    },
