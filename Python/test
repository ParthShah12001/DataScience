var Labels = EY.Fact.Forms.Resources.Labels

var ModalButton = Backbone.Model.extend({
    text: "",
    getIndex: function () {
        return this.collection ? this.collection.indexOf(this) : -1;
    },
    isDefault: function () {
        return this.getIndex() === this.collection.length - 1;
    },
    isCancel: function () {
        return this.get('isCancel');
    }
});

var ModalButtons = Backbone.Collection.extend({
    model: ModalButton
});

var ModalButtonView = Marionette.View.extend({
    tagName: "button",
    template: false,
    className: "btn btn-secondary",
    attributes: {
        type: "button"
    },
    events: {
        click: "onClick"
    },
    modelEvents: {
        "change:isDisabled": "setEnabledState"
    },
    onRender: function () {
        this.$el.text(this.model.get("text"));

        this.setEnabledState(this.model);

        this.model.isDefault() &&
            !this.model.isCancel() && //Check for non cancel button
            this.$el.removeClass("btn-secondary").addClass("btn-primary");
    },
    onClick: function (buttonModel) {
        this.model.set("isClicked", true);
    },
    setEnabledState: function (buttonModel) {
        this.$el.prop("disabled", buttonModel.get("isDisabled"));
    }
});

var ModalButtonCollectionView = Marionette.CollectionView.extend({
    childView: ModalButtonView
});

var ModalLayout = Marionette.View.extend({
    template: "#modalDialogLayoutTemplate",
    selectedValue: 0,
    ui: {
        title: ".modal-title",
        body: "#body",
        footer: ".modal-footer",
        modal: "section.modal",
        icon: "#icon",
        topPortion: ".row",
        header: ".modal-header"
    },
    regions: {
        header: ".modal-header",
        body: "@ui.body",
        footer: "@ui.footer"
    },
    events: {
        "hidden.bs.modal @ui.modal": "destroy"
    },
    collectionEvents: {
        "change:isClicked": "buttonClick"
    },
    childViewEvents: {
        destroy: "onChildDestroy"
    },  
    initialize: function (options) {
        this.initialOverflow = options.isDrawer ? "" : $("body").css("overflow");

        if ($.isFunction(options.callback)) {
            this.callback = options.callback;
        }
        this.context = options.context;

        this.listenTo(options.view, "change:input", this.handleInputChange);
    },
    handleInputChange: function (reason) {
        console.log(reason);
        if (reason.trim() !== "") {
            this.reason = reason;
            this.options.collection.models[1].set("isDisabled", false);
        }
        else if (reason.trim() === "") {
            this.options.collection.models[1].set("isDisabled", true);
        }
    },
    onRender: function () {
        var notification = this.options.notificationType || exports.NotificationTypes.none;
        if (notification.iconStyle) {
            this.ui.icon.addClass(notification.iconStyle);
        } else {
            this.ui.body.removeClass("col-xs-10");
            this.ui.body.addClass("container-fluid");
        }

        this.options.isDrawer &&
            this.ui.modal.addClass("drawer");

        if(this.options.view)   
            this.showChildView("body", this.options.view, { buttons: this.collection });
            //this.listenTo(this.options.view, "change:input", this.onChange);

        this.options.title &&
            this.ui.title.text(this.options.title);

        if (this.options.skipHeader || !this.options.headerView) {
            if (!this.options.showDefaultHeader)
                this.ui.header.hide();
        } else {
            this.getRegion("header").empty();
            this.getRegion("header").show(this.options.headerView);
        }

        if (this.options.skipFooter) {
            this.ui.footer.hide();
        } else {
            this.ui.footer.show();
        }

        this.collection &&
            this.showChildView("footer", new ModalButtonCollectionView({
                collection: this.collection
            }));

        this.ui.modal.modal({ show: true, backdrop: this.options.showBackdrop });
    },
    onChange: function(){
        console.log("hi");
    },
    onDestroy: function () {
        if (!this.options.deferred) {
            return;
        }

        var context = this.options.context || this.options.view || this;

        this.options.deferred.resolveWith(context, [this.selectedValue, this.options]);
    },
    // calling destroy(returnValue) will allow you to propagate the return value to your
    // calling view by way of the $.Deferred return value. This allows you to notify
    // the calling view how the modal was resolved so you may branch accordingly.
    onChildDestroy: function (childView, returnValue) {
        returnValue && (this.selectedValue = returnValue);
        this.close();
    },
    buttonClick: function (buttonModel) {
        if (!buttonModel.get("isClicked")) {
            return;
        }
        this.selectedValue = buttonModel.getIndex();
        if (this.validate()) {
            this.close();
        } else {
            buttonModel.set("isClicked", false);
        }
    },
    // triggers validate event (with an onValidate function call as well) containing
    // an option "cancel" that, if true, will cancel closing the dialog. The buttonIndex
    // is provided to allow the user to determine which button was pushed.
    validate: function () {
        if (!this.getRegion("body").currentView) {
            return true;
        }

        var options = {
            cancel: false,
            buttonIndex: this.selectedValue,
            source: this.getRegion("body").currentView,
            reason : this.reason
        }

        this.getRegion("body").currentView.triggerMethod("validate", options);
        return !options.cancel;
    },
    close: function () {
        if (this.isAttached()) {
            this.ui.modal.modal("hide");
            $("body").css("overflow", this.initialOverflow);
        }
    },
    templateContext: function () {
        var id = (this.options.id ? this.options.id : "modelDialog");
        return {
            title: this.getOption("title"),
            id:id
        }
    }
});

var DialogView = Marionette.View.extend({
    serializeData: function () {
        return { text: this.options.text };
    },
    template: "#dialogTemplate"
});

var DialogViewNew = Marionette.View.extend({
    template: "#dialogTemplateNew",
    ui: {
        textbox:"input"
    },
    events: {
        "change @ui.textbox":"onInputChange"
    },
    
    onInputChange: function () {
        var reason = this.$("input").val().trim();
        this.trigger("change:input", reason);
        
    }
});
var DrawerContentLayout = Marionette.View.extend({
    template: "#drawerContentTemplate",
    regions: {
        drawerContent: "section.drawer-content"
    },
    ui: {
        drawerCloseIcon: ".close-drawer"
    },
    events: {
        "click @ui.drawerCloseIcon": "closeClick"
    },
    onRender: function () {

        if (this.getOption("removeClose")) {
            this.ui.drawerCloseIcon.hide();
        } else {
            this.ui.drawerCloseIcon.show();
        }

        if (this.getOption("view")) {
            this.showChildView("drawerContent", this.options.view);
            // tell the parent layout we want to close
            this.listenTo(this.options.view, 'destroy', this.destroy);
        }
    },
    onValidate: function (options) {
        this.getRegion("drawerContent").currentView.triggerMethod("validate", options);
    },
    closeClick: function () {
        this.destroy();
    }
});

exports.DrawerSimpleHeaderView = Marionette.View.extend({
    template: '#drawerSimpleHeaderTemplate',
    onRender: function () {
    },
    templateContext: function () {
        return {
            text: this.getOption("text"),
            tooltip: this.getOption("tooltip")
        }
    }
});

//*********************
// param: title - title to show in title bar
// param: text - text to show in pop-up
// param: view - optional - if included, overrides the "text" value provided and is displayed in the client area
// param: buttons - optional - array of elements containing a "text" attribute with the name of the button. The
//          buttons are displayed in the order they are provided. The return result is the index of the button
//          pressed when dismissing the dialog.
// param: context - the calling execution context (e.g. a view) which is the "this" value in the promise callback
// returns: promise - promise callback function params: (result, options) where result is the index of the button
//          pressed when dismissing the dialog.
//
// example: Modals.ShowModal({ 
//                      text: Labels.msg02, 
//                      title: Labels.Info,
//                      okBtnText: Labels.Yes,
//                      cancelBtnText: Labels.No,
//                      containerClass: Class to diferentiate the type of modal
//                      context: this 
//                    });
exports.ShowModal = function (options) {
    var initOptions = options || {};

    // create a new div under <body> for the modal - it will be deleted when the view is destroyed
    var el = $("<section name=\"modalContainer\" class=" + initOptions.containerClass + "></section>");
    $("body").append(el);
    if (initOptions.containerClass === "result-modal") {
        $(".result-modal").addClass('show-toast');
        setTimeout(function () {
            $(".result-modal").remove();
            $('.modal-backdrop').remove();
        }, 5000);
    }
    _.extend(initOptions,
        {
            el: el,
            view: initOptions.view || new DialogView(initOptions),
            deferred: $.Deferred(),
            collection: new ModalButtons(initOptions.buttons)
        });
    var modalLayoutView = new ModalLayout(initOptions);
    modalLayoutView.render();

    return initOptions.deferred.promise();
};


exports.ShowModalNew = function (options) {
    var initOptions = options || {};

    // create a new div under <body> for the modal - it will be deleted when the view is destroyed
    var el = $("<section name=\"modalContainer\" class=" + initOptions.containerClass + "></section>");
    $("body").append(el);
    if (initOptions.containerClass === "result-modal") {
        $(".result-modal").addClass('show-toast');
        setTimeout(function () {
            $(".result-modal").remove();
            $('.modal-backdrop').remove();
        }, 5000);
    }
    _.extend(initOptions,
        {
            el: el,
            view: initOptions.view || new DialogViewNew(initOptions),
            deferred: $.Deferred(),
            collection: new ModalButtons(initOptions.buttons)
        });
    var modalLayoutView = new ModalLayout(initOptions);
    modalLayoutView.render();

    return initOptions.deferred.promise();
};

//*********************
// param: title - title to show in title bar
// param: text - text to show in pop-up
// param: view - optional - if included, overrides the "text" value provided and is displayed in the client area
// param: okBtnText - optional - replace default "OK" text with user-defined value
// param: context - the calling execution context (e.g. a view) which is the "this" value in the promise callback
// returns: promise - success on "OK" - promise callback function params: (result, options) where result is always 0.
//
// example: Modals.ShowAlert({ 
//                      text: Labels.msg02, 
//                      title: Labels.Info,
//                      okBtnText: Lables.Yes,
//                      context: this 
//                    });
exports.ShowAlert = function (options) {
    options = _.extend({
        buttons: [
            {
                text: options.okBtnText || Labels.OK
            }
        ]
    },
        options);

    return exports.ShowModal(options);
};

//*********************
// param: title - title to show in title bar
// param: text - text to show in pop-up
// param: view - optional - if included, overrides the "text" value provided and is displayed in the client area
// param: okBtnText - optional - replace default "OK" text with user-defined value
// param: cancelBtnText - optional - replace default "Cancel" text with user-defined value
// param: context - the calling execution context (e.g. a view) which is the "this" value in the promise callback
// returns: promise - success on "OK", error on "Cancel" - promise callback function params: (result, options) where
//          result is 0 for error and 1 for success.
//
// example: Modals.ShowDecisionModal({ 
//                      text: Labels.msg02, 
//                      title: Labels.Info,
//                      okBtnText: Labels.Yes,
//                      cancelBtnText: Labels.No,
//                      context: this 
//                    });
exports.ShowDecisionModal = function (options) {
    options = _.extend({
        buttons: [
            {
                text: options.cancelBtnText || Labels.No
            },
            {
                text: options.okBtnText || Labels.Yes
            }
        ]
    },
        options);
    var deferred = $.Deferred();

    exports.ShowModal(options)
        .done(function (btnIndex, options) {
            // we'll pass along the "this" context intact
            if (btnIndex > 0) {
                deferred.resolveWith(this, arguments);
            } else {
                deferred.rejectWith(this, arguments);
            }
        });

    return deferred.promise();
};

exports.ShowDecisionModalNew = function (options) {
    options = _.extend({
        buttons: [
            {
                text: options.cancelBtnText || Labels.No
            },
            {
                text: options.okBtnText || Labels.OK,
                isDisabled: true
            }
        ]
    },
        options);
    var deferred = $.Deferred();

    exports.ShowModalNew(options)
        .done(function (btnIndex, options) {
            // we'll pass along the "this" context intact
            if (btnIndex > 0) {
                deferred.resolveWith(this, arguments);
            } else {
                deferred.rejectWith(this, arguments);
            }
        });

    return deferred.promise();
};


//*********************
// param: title - title to show in title bar
// param: headerView - optional - if included, overrides the "title" value provided and is displayed in the left title area
// param: view - optional - if included, overrides the "text" value provided and is displayed in the client area
// param: context - the calling execution context (e.g. a view) which is the "this" value in the promise callback
// returns: promise - promise callback function that is executed when the drawer is closed
//
// example: Modals.ShowDrawer({ 
//              title: Labels.MyDrawerTitle,
//              view: new MyDrawerView(myOptions),
//              context: this,
//              cancelBtnText: Labels.Cancel,
//              okBtnText: Labels.Ok
//          });
exports.ShowDrawer = function (options) {
    var headerView = options.headerView ||
        new exports.DrawerSimpleHeaderView({
            text: options.title,
            tooltip: options.tooltip
        });

    options = _.extend({}, options, {
        buttons: [
            { text: options.cancelBtnText || Labels.Cancel, isCancel: true }
        ],
        isDrawer: true,
        headerView: headerView,
        skipHeader: options.skipHeader,
        skipFooter: options.skipFooter,
        showDefaultHeader: options.showDefaultHeader,
        view: new DrawerContentLayout(options)
    });
    //Add button
    if (!options.hideOkBtnText)
        options.buttons.push({ text: options.okBtnText || Labels.OK, isCancel: false });

    return exports.ShowModal(options);
};


exports.NotificationTypes = {
    none: {
        iconStyle: '',
        textStyle: ''
    },
    success: {
        iconStyle: 'fact-icon popup-success-icon large',
        textStyle: ''
    },
    info: {
        iconStyle: 'alert-msg-info fact-icon infocircle-icon-blue',
        textStyle: ''
    },
    caution: {
        iconStyle: 'fact-icon msg-warning-icon large',
        textStyle: ''
    },
    error: {
        iconStyle: 'fact-icon msg-error-icon',
        textStyle: ''
    },
    download: {
        iconStyle: 'fact-icon popup-download-icon large',
        textStyle: ''
    }
};
