exports.IssuerInfo = Marionette.View.extend({
    behaviors: {
        ToolTip: {},
        Authorize: {}
    },
    isGfisCodeValid: false,
    isMercCodeValid: false,
    template: '#issuerProfileInformationTemplate',
    regions: {
        issuerName: '#issuerName',
        cikNumber: '#cikNumber',
        issuertype: '#issuertype',
        clientFye: '#clientFye',
        isIpo: '#isIpo',
        profileStatus: '#profileStatus',
        country: '#country',
        state: '#state',
        city: '#city',
        mercClientCode: '#mercClientCode',
        gfisClientCode: '#gfisClientCode',
        gfisId: '#gfisId'
    },
    ui: {
        profileStatus: '#profileStatus',
        mercClientCode: '#mercClientCode',
        gfisClientCode: '#gfisClientCode',
        gfisId: '#gfisId',
        clientFye: "#clientFye",
        isIpo: '#isIpo',
        issuerProfileContainer: "#issuer-profile-container",
        accordion: ".collapse,.collapsing",
        spanUpDownIcon: "[id=\"spanUpDownIcon\"]",
        spanUpDownIconAudit: "[id=\"spanUpDownIconAudit\"]",
        dataToggle: "[id=\"dataToggle\"]",
        formApProfileSeriesId: '#formApProfileSeriesId',
        issuerProfileSeriesId: '#issuerProfileSeriesId'
    },
    events: {
        'click @ui.mapIssuerFunds': 'mapIssuerFunds',
        'blur @ui.gfisClientCode': 'onGfisClientCodeChange',
        'blur @ui.mercClientCode': 'onMercClientCodeChange',
        'blur @ui.issuerName': 'onIssuerNameChange'
    },
    modelEvents: {
        "change:issuerTypeId": function () {
            //run view logic only when view is rendered
            if (this.isRendered())
                this.decideClientFyeState();
        },
        "change:statusId": function () {
            //run view logic only when view is rendered
            if (this.isRendered())
                this.decideChangeRequestPanel();
        }
    },
    templateContext: function () {
        var issuerNameClass = "form-fields-edit";
        var allOtherClass = "form-fields-edit";
        if (this.model.get("statusId") >= 3) {
            issuerNameClass = "form-fields-completed";
            allOtherClass = "form-fields-completed";
        }
        else if (this.mode.get("statusId") == 1) {
            allOtherClass = "form-fields-disabled";
        }
        return {
            issuerNameClass: issuerNameClass,
            allOtherClass: allOtherClass
        };
    },
    initialize: function () {
        this.listenTo(this, "childview:button:clicked", this.inputSubmitted);
        this.listenTo(this, "childview:EditIconClicked", this.editIconClicked); 
        //Display Profile Status as "Draft" until required fields are completed and saving. On saving to display Profile Status as "Active" & "Inactive"
        var issuerStatusArray = [];
        if (_.isUndefined(this.options.issuer.get("statusId")) || this.options.issuer.get("statusId") == 1) {
            issuerStatusArray = _.reject(EY.Fact.Resources.IssuerStatuses, function (obj) { return obj.name !== 'Draft'; });
        } else {
            issuerStatusArray = _.reject(EY.Fact.Resources.IssuerStatuses, function (obj) { return obj.name === 'Draft'; });
        }

        this.options.profileStatuses = _.map(issuerStatusArray, function (item) {
            return { name: item.name, value: item.id };
        });

        this.listenTo(Validation.errors.collection, "add remove ", this.onValidationErrorsCheck);
        if (this.model.get('gfisClientCode') && this.model.get('gfisClientCode').length > 0) {
            this.isGfisCodeValid = true;
        }
        if (this.model.get('mercClientCode') && this.model.get('mercClientCode').length > 0) {
            this.isMercCodeValid = true;
        }
    },
    editIconClicked: function (describedby) {
        if (describedby == "mostRecentPeriodFsEndDate") {
            this.$("#clientFye").removeClass("form-fields-completed");
            this.$("#clientFye").addClass("form-fields-edit");
        }
        else if (describedby == "issuerTypeId") {
            this.$("#issuertype").removeClass("form-fields-completed");
            this.$("#issuertype").addClass("form-fields-edit");
        }
        else {
            this.$("#" + describedby).removeClass("form-fields-completed");
            this.$("#" + describedby).addClass("form-fields-edit");
        }
    },
    inputSubmitted: function (describedby) {
        if (describedby == "mostRecentPeriodFsEndDate") {
            this.$("#clientFye").removeClass("form-fields-edit");
            this.$("#clientFye").addClass("form-fields-completed");
        } 
        else if (describedby == "issuerTypeId") {
            this.$("#issuertype").removeClass("form-fields-edit");
            this.$("#issuertype").addClass("form-fields-completed");
        }
        else {
            this.$("#" + describedby).removeClass("form-fields-edit");
            this.$("#" + describedby).addClass("form-fields-completed");
        }
    },

    onValidationErrorsCheck: function () {
        var context = this;
        if (Validation.errors.attributeExists('validateClientCode')) {
            if (context.isGfisCodeValid == false) {
                context.ui.gfisClientCode && context.ui.gfisClientCode.length > 0 && $("<section id='gfisClientCodeError' class='required-errmsg'><span class='fact-icon msg-error-icon'></span>" + Labels.MSG163 + " </section>")
                    .insertAfter(context.ui.gfisClientCode.find('[name ="gfisClientCode"]'));
            }

            if (context.isMercCodeValid == false) {
                context.ui.mercClientCode && context.ui.mercClientCode.length > 0 && $("<section id='mercClientCodeError' class='required-errmsg'><span class='fact-icon msg-error-icon'></span>" + Labels.MSG163 + " </section>")
                    .insertAfter(context.ui.mercClientCode.find('[name ="mercClientCode"]'));
            }
        }
        else {
            if (context.isRendered())
                if (!this.model.get('gfisClientCode') == "") {

                    context.ui.gfisClientCode && context.ui.gfisClientCode.length > 0 && context.ui.gfisClientCode.find('[name ="gfisClientCode"]').next().remove();
                }
            if (!this.model.get('mercClientCode') == "") {
                context.ui.mercClientCode && context.ui.mercClientCode.length > 0 && context.ui.mercClientCode.find('[name ="mercClientCode"]') && context.ui.mercClientCode.find('[name ="mercClientCode"]').next().remove();
            }
        }
    },
    onRender: function () {
        var context = this;

        if (this.options.layoutDataEntity == "FormAp") {
            this.ui.profileStatus.addClass("hide-element");
            this.ui.mercClientCode.addClass("hide-element");
            this.ui.gfisClientCode.addClass("hide-element");
            this.ui.gfisId.addClass("hide-element");
        }
        
        // If we're hiding the control, remove the class to remove the gap
        if (this.options.hideControls.profileStatus) {
            this.ui.profileStatus.removeClass('col-lg-3 col-md-4 col-sm-4');
        }
        if (this.options.hideControls.gfisClientCode) {
            this.ui.gfisClientCode.removeClass('col-lg-3 col-md-4 col-sm-4');
        }
        if (this.options.hideControls.gfisId) {
            this.ui.gfisId.removeClass('col-lg-3 col-md-4 col-sm-4');
        }

        this.decideChangeRequestPanel();

        this.showChildView("issuerName", new Text.TextBoxNew({
            model: this.model,
            lockModel: this.options.lockModel,
            label: Labels.IssuerName,
            tooltip: Labels.TT_IssuerName,
            referenceNumber: (this.model.get("formApTypeId") != FormApType.brokerDealer) ? Labels.a31a3 : "",
            attributeName: "name",
            describedby: "issuerName",
            dataEntity: this.options.layoutDataEntity,
            dataFunctions: this.options.dataFunctions,
            isDisabled: this.options.skipAuthorize,
            skipAuthorize: this.options.skipAuthorize,
            enableChangeRequest: {
                fieldId: EY.Fact.Resources.TypeCodes.changeRequestField.issuerName
            },
            isMandetory: true
        }));

        //Speciailized Form Ap CikNumber text box with parse to prefix zeros
        this.showChildView("cikNumber", new Text.TextBoxCikNumberNew({
            label: Labels.CikNumber,
            lockModel: this.options.lockModel,
            tooltip: Labels.TT_CIKNumber,
            referenceNumber: (this.model.get("formApTypeId") != FormApType.brokerDealer) ? Labels.a31a2 : "",
            model: this.model,
            attributeName: 'cikNumber',
            describedby: 'cikNumber',
            dataEntity: this.options.layoutDataEntity,
            dataFunctions: this.options.dataFunctions,
            isDisabled: this.options.skipAuthorize,
            skipAuthorize: this.options.skipAuthorize,
            enableChangeRequest: {
                fieldId: EY.Fact.Resources.TypeCodes.changeRequestField.cikNumber
            },
            isMandetory: true
        }));

        //Specialized select list that displays IssuerTypes that binds with a model by "issuerTypeId" attribute name. 
        //maintains state of the elements based on models "statusId" value
        var IssuerTypeSelectList = List.SelectListNew.extend({
            initialize: function (options) {
                if (!this.options.issuer)
                    throw new Error("Option Issuer is required");

                options.attributeName = "issuerTypeId";

                this.listenTo(this.options.issuer, "change:statusId", function (value) {
                    this.render();
                });

                List.SelectListNew.prototype.initialize.apply(this, arguments);
            },
            onBeforeRender: function () {

                this.options.isDisabled = this.options.skipAuthorize || this.options.issuer.get("statusId") === TypeCodes.issuerStatus.active;
            },
            updateModelValue: function () {
                List.SelectListNew.prototype.updateModelValue.apply(this, arguments);
                context.triggerMethod("change:issuer:type", this);
            }
        });

        this.options.issuerTypeControl = new IssuerTypeSelectList({
            label: Labels.IssuerType,
            lockModel: this.options.lockModel,
            tooltip: Labels.TT_IssuerType,
            referenceNumber: (this.model.get("formApTypeId") != FormApType.brokerDealer) ? Labels.a31a1 : "",
            model: this.model,
            attributeName: 'issuerTypeId',
            dataEntity: this.options.layoutDataEntity,
            dataFunctions: this.options.dataFunctions,
            describedby: 'issuerTypeId',
            issuer: this.options.issuer,
            collection: new Backbone.Collection(Resources.SelectLists.issuerTypes),
            skipAuthorize: this.options.skipAuthorize,
            enableChangeRequest: {
                fieldId: EY.Fact.Resources.TypeCodes.changeRequestField.issuerType
            },
            isMandetory: true
        });

        this.showChildView("issuertype", this.options.issuerTypeControl);

        this.showChildView("clientFye", new DatetimeControl.ReadOnlyDateTimeNew({
            model: this.model,
            lockModel: this.options.lockModel,
            label: Labels.ClientFye,
            tooltip: Labels.TT_FYE,
            attributeName: 'mostRecentPeriodFsEndDate',
            describedby: 'mostRecentPeriodFsEndDate',
            titleFormat: 'MM',
            dateFormat: 'dd M',
            viewMode: 'months',
            maxViewMode: 'months',
            skipAuthorize: true,
            dataEntity: this.options.layoutDataEntity
        }));

        this.decideClientFyeState();

        if (this.options.hideControls.isIpo) {

            this.ui.isIpo.hide();
        } else {

            this.showChildView("isIpo", new List.SelectListNew({
                model: this.model,
                lockModel: this.options.lockModel,
                attributeName: 'isIpo',
                describedby: 'isIpo',
                label: Labels.AnyAuditReportForFirstTime,
                tooltip: this.model.get('issuerTypeId') === TypeCodes.issuerType.investmentCompany ?
                    Labels.TT_34 : Labels.TT_13,
                dataEntity: this.options.layoutDataEntity,
                dataFunctions: this.options.dataFunctions,
                collection: new Backbone.Collection([
                    { name: Labels.No, value: new Number(1) },
                    { name: Labels.Yes, value: new Number(2) }
                ]),
                isDisabled: true,
                //defaultNeeded: new Number(1),
                skipAuthorize: this.options.skipAuthorize
            }));
        }

        if (!this.options.hideControls.profileStatus) {
            //Display Profile Status as "Draft" until required fields are completed and saving. On saving to display Profile Status as "Active" & "Inactive"
            this.showChildView("profileStatus", new IssuerStatusSelectList({
                label: Labels.ProfileStatus,
                tooltip: Labels.TT_ProfileStatus,
                model: this.options.issuer,
                lockModel: this.options.lockModel,
                attributeName: 'statusId',
                describedby: 'statusId',
                entityName: this.options.layoutDataEntity,
                dataEntity: this.options.layoutDataEntity,
                dataFunctions: this.options.dataFunctions,
                isDisabled: this.options.skipAuthorize,
                collection: new IssuerStatusCollection(this.options.profileStatuses),
                skipAuthorize: this.options.skipAuthorize
            }));
        }
        this.showChildView("country",
            new List.SelectListNew({
                label: Labels.CountryUSRegion,
                tooltip: Labels.TT_15,
                model: this.model,
                lockModel: this.options.lockModel,
                attributeName: 'locationId',
                describedby: 'country',
                dataEntity: this.options.layoutDataEntity,
                dataFunctions: this.options.dataFunctions,
                isDisabled: this.options.skipAuthorize,
                collection: new Backbone.Collection(Resources.SelectLists.countries),
                skipAuthorize: this.options.skipAuthorize,
                enableChangeRequest: {
                    fieldId: EY.Fact.Resources.TypeCodes.changeRequestField.issuerLocation
                },
                isMandetory: true
            }));



        this.options.stateControl = new List.StateSelectList({
            label: Labels.State,
            lockModel: this.options.lockModel,
            tooltip: Labels.TT_State,
            model: this.model,
            attributeName: 'stateId',
            describedby: 'state',
            dataEntity: this.options.layoutDataEntity,
            dataFunctions: this.options.dataFunctions,
            isDisabled: this.options.skipAuthorize,
            isReadOnly: this.options.skipAuthorize,
            collection: new Backbone.Collection(Resources.SelectLists.states),
            skipAuthorize: this.options.skipAuthorize,
            enableChangeRequest: {
                fieldId: EY.Fact.Resources.TypeCodes.changeRequestField.issuerLocation
            }
        });
        this.showChildView("state", this.options.stateControl);

        this.showChildView("city", new Text.TextBoxNew({
            label: Labels.CityHdQtrs,
            lockModel: this.options.lockModel,
            tooltip: Labels.TT_City,
            model: this.model,
            attributeName: 'cityName',
            describedby: 'city',
            dataEntity: this.options.layoutDataEntity,
            dataFunctions: this.options.dataFunctions,
            isDisabled: this.options.skipAuthorize,
            skipAuthorize: this.options.skipAuthorize,
            enableChangeRequest: {
                fieldId: EY.Fact.Resources.TypeCodes.changeRequestField.issuerLocation
            }
        }));



        if (!this.options.hideControls.gfisClientCode) {

            this.showChildView("mercClientCode", new Text.TextBoxNew({
                label: 'Mercury Client Code',
                lockModel: this.options.lockModel,
                tooltip: 'Mercury Client Code',
                model: this.model,
                attributeName: 'mercClientCode',
                describedby: 'mercClientCode',
                dataEntity: this.options.layoutDataEntity,
                dataFunctions: this.options.dataFunctions,
                isDisabled: this.options.skipAuthorize,
                skipAuthorize: this.options.skipAuthorize,
                isMandetory: true
            }));


            this.showChildView("gfisClientCode", new Text.TextBoxNew({
                label: Labels.GfisClientCode,
                lockModel: this.options.lockModel,
                tooltip: Labels.TT_GFISClientCode,
                model: this.model,
                attributeName: 'gfisClientCode',
                describedby: 'gfisClientCode',
                dataEntity: this.options.layoutDataEntity,
                dataFunctions: this.options.dataFunctions,
                isDisabled: this.options.skipAuthorize,
                skipAuthorize: this.options.skipAuthorize,
                isMandetory: true
            }));
        }
        if (!this.options.hideControls.gfisId) {
            this.showChildView("gfisId", new Text.TextBoxNew({
                label: Labels.GISID,
                lockModel: this.options.lockModel,
                tooltip: Labels.TT_GISID,
                model: this.model,
                attributeName: 'gisCode',
                describedby: 'gfisId',
                dataEntity: this.options.layoutDataEntity,
                dataFunctions: this.options.dataFunctions,
                isDisabled: this.options.skipAuthorize,
                skipAuthorize: this.options.skipAuthorize,
                isMandetory: true
            }));
        }

        if (this.options.skipAuthorize)
            this.ui.dataToggle.removeAttr('data-toggle');
    },

    decideChangeRequestPanel: function () {

        if (!this.model.allowAddingChangeRequests && this.model.changeRequests.pendingRequestCount() > 0) {
            this.ui.issuerProfileContainer.removeClass();
            this.ui.issuerProfileContainer.addClass("container-fluid");
        }
        else {
            this.ui.issuerProfileContainer.removeClass();
            this.ui.issuerProfileContainer.addClass("container-fluid");
        }
    },
    decideClientFyeState: function () {

        if (this.model.get("issuerTypeId") !== TypeCodes.issuerType.investmentCompany) {
            if (!this.ui.clientFye.hasClass('col-lg-3 col-md-4 col-sm-4')) {
                this.ui.clientFye.addClass('col-lg-3 col-md-4 col-sm-4');
                this.ui.clientFye.show();

                if (this.ui.isIpo[0].firstElementChild && this.ui.isIpo[0].firstElementChild.firstElementChild && !this.options.hideControls.isIpo)
                    this.ui.isIpo[0].firstElementChild.firstElementChild.title = Labels.TT_13;

            }
        } else {
            this.ui.clientFye.removeClass('col-lg-3 col-md-4 col-sm-4');
            this.ui.clientFye.hide();

            if (this.ui.isIpo[0].firstElementChild && this.ui.isIpo[0].firstElementChild.firstElementChild && !this.options.hideControls.isIpo)
                this.ui.isIpo[0].firstElementChild.firstElementChild.title = Labels.TT_34;
        }
    },
    templateContext: function () {
        var unassigned = '';
        if (this.model.get("issuerTypeId") === TypeCodes.issuerType.investmentCompany
            && this.model.get("isSeriesIdApplicable") === 2
            && this.options.issuer.getFunds().getUnassignedCount() > 0) {
            unassigned = this.options.issuer.getFunds().getUnassignedCount() + ' unassigned';
        }
        return {
            unassigned: unassigned
        };
    },
    onGfisClientCodeChange: function () {
        var context = this;
        var customer = new ExternalEntities.Customer();
        // Only need to check for Issuer Profile and not for FormAp profile
        // On load of Form Ap profile change:gfisClientCode gets called. It should not
        if (this.options.layoutDataFunctions == "ManageIssuerProfile" && (this.model.get('gfisClientCode'))) {
            customer.gfisClientCode = this.model.get('gfisClientCode');
            customer.fetch({ gfisClientCode: this.model.get('gfisClientCode') }).done(function (customerModel) {
                if (!(customerModel && customerModel.gfisClientId)) {
                    context.isMercCodeValid = false;
                    context.isGfisCodeValid = false;
                    if (!Validation.errors.attributeExists('validateClientCode')) {
                        Validation.errors.add('validateClientCode');
                    }
                    context.model.set('mercClientCode', null);

                }
                else {

                    if (customerModel.mercClientId) {
                        context.model.set('mercClientCode', customerModel.mercClientId);
                        context.isMercCodeValid = true;
                    }
                    else {
                        context.model.set('mercClientCode', null);
                        context.isMercCodeValid = false;
                    }
                    context.isGfisCodeValid = true;
                }

            });
        }
        else {
            context.isGfisCodeValid = false;
            if (this.options.layoutDataFunctions == "ManageIssuerProfile" && this.options.issuer.get("statusId") !== TypeCodes.issuerStatus.active && !Validation.errors.attributeExists('validateClientCode')) {
                if (this.model.get('mercClientCode') && this.model.get('mercClientCode').length > 0 && context.isMercCodeValid == false) {
                }
            }
            //In case of text box is blank and issuer is in draft mode, remove the error. As in draft mode we can save with blank value
            else if (this.options.layoutDataFunctions == "ManageIssuerProfile" && this.options.issuer.get("statusId") !== TypeCodes.issuerStatus.active && Validation.errors.attributeExists('validateClientCode')) {
                if (!this.model.get('mercClientCode') || this.model.get('mercClientCode').length == 0 || context.isMercCodeValid == true) {
                }
            }
        }
    },

    onIssuerNameChange: function () {
        if (this.$('#issuerName input').val().trim().length > 0) {
            Modals.ShowAlert({
                text: Labels.MSG177,
                okBtnText: Labels.OK,
                context: this,
                notificationType: Modals.NotificationTypes.info
            });
        }
    },
    onMercClientCodeChange: function () {
        var context = this;
        var customer = new ExternalEntities.Customer();
        // Only need to check for Issuer Profile and not for FormAp profile
        // On load of Form Ap profile change:mercClientCode gets called. It should not
        if (this.options.layoutDataFunctions == "ManageIssuerProfile" && (this.model.get('mercClientCode'))) {
            customer.mercClientCode = this.model.get('mercClientCode');
            customer.fetch({ mercClientCode: this.model.get('mercClientCode') }).done(function (customerModel) {
                if (!(customerModel && customerModel.mercClientId)) {
                    context.isMercCodeValid = false;
                    context.isGfisCodeValid = false;
                    if (!Validation.errors.attributeExists('validateClientCode')) {
                        Validation.errors.add('validateClientCode');
                    }
                    context.model.set('gfisClientCode', null);

                }
                else {
                    if (customerModel.gfisClientId) {
                        context.model.set('gfisClientCode', customerModel.gfisClientId);
                        context.isGfisCodeValid = true;
                    }
                    else {
                        context.model.set('gfisClientCode', null);
                        context.isGfisCodeValid = false;
                    }
                    context.isMercCodeValid = true;
                    Validation.errors.remove('validateClientCode');
                }

            });
        }
        else {
            context.isMercCodeValid = false;
            if (this.options.layoutDataFunctions == "ManageIssuerProfile" && this.options.issuer.get("statusId") !== TypeCodes.issuerStatus.active && !Validation.errors.attributeExists('validateClientCode')) {
                if (this.model.get('gfisClientCode') && this.model.get('gfisClientCode').length > 0 && context.isGfisCodeValid == false) {
                    Validation.errors.add('validateClientCode');
                }

            }
            //In case of text box is blank and issuer is in draft mode, remove the error. As in draft mode we can save with blank value
            else if (this.options.layoutDataFunctions == "ManageIssuerProfile" && this.options.issuer.get("statusId") !== TypeCodes.issuerStatus.active && Validation.errors.attributeExists('validateClientCode')) {
                if (!this.model.get('gfisClientCode') || this.model.get('gfisClientCode').length == 0 || context.isGfisCodeValid == true) {
                    Validation.errors.remove('validateClientCode');
                }
            }
        }
    }
});


<script id="issuerProfileInformationTemplate" type="text/html">
    <div id="issuer-profile-container">
        <div>
            <div>
                <div class="container-fluid form-header-title-container">
                    <div class="title-container" id="AuditconfirmSection">
                        <span class="title-container-label">Issuer Information</span>
                    </div>
                </div>
                <div class="container-fluid collapse in form-container-flex" id="issuerInformationDetails">
                    <div class=" bottom10  row-align-bottom form-container-fields">
                        <div class="form-help-description">
                            Use the sidebar to navigate to applicable Form AP and Participant Information sections. A 
                            <span class="checkbox-text"> green checkbox 
                                <svg xmlns="http://www.w3.org/2000/svg" width="21" height="20" viewBox="0 0 21 20" fill="none">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M5.89172 9.97473C6.1358 9.73065 6.53152 9.73065 6.7756 9.97473L8.83366 12.0328L14.2251 6.64139C14.4691 6.39732 14.8649 6.39732 15.1089 6.64139C15.353 6.88547 15.353 7.2812 15.1089 7.52528L9.2756 13.3586C9.03152 13.6027 8.6358 13.6027 8.39172 13.3586L5.89172 10.8586C5.64764 10.6145 5.64764 10.2188 5.89172 9.97473Z" fill="#1F893F"/>
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M10.5003 2.29167C6.24313 2.29167 2.79199 5.74281 2.79199 10C2.79199 14.2572 6.24313 17.7083 10.5003 17.7083C14.7575 17.7083 18.2087 14.2572 18.2087 10C18.2087 5.74281 14.7575 2.29167 10.5003 2.29167ZM1.54199 10C1.54199 5.05245 5.55277 1.04167 10.5003 1.04167C15.4479 1.04167 19.4587 5.05245 19.4587 10C19.4587 14.9476 15.4479 18.9583 10.5003 18.9583C5.55277 18.9583 1.54199 14.9476 1.54199 10Z" fill="#1F893F"/>
                                </svg> 
                            </span> will appear next to the completed sections.
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2 {{issuerNameClass}}" id="issuerName"></div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2 {{allOtherClass}}" id="issuertype"></div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2 {{allOtherClass}}" id="cikNumber"></div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield {{allOtherClass}}" id="clientFye"></div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2 {{allOtherClass}}" id="isIpo"></div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2 {{allOtherClass}}" id="profileStatus"></div>
                        <span class="section-divider-text">Location</span>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2 {{allOtherClass}}" id="country"></div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2 {{allOtherClass}}" id="state"></div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2 {{allOtherClass}}" id="city"></div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2 {{allOtherClass}}" id="mercClientCode"></div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2 {{allOtherClass}}" id="gfisClientCode"></div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2 {{allOtherClass}}" id="gfisId"></div>
                        <div class="col-lg-4 col-md-4 col-sm-4 readonlyfield2"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>
